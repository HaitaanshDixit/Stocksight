# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SAggbZHNnmHaA99s9OMx5b2RkqkS3Uy2
"""

!pip install streamlit --no-deps
!pip install altair watchdog
!pip install yfinance joblib keras scikit-learn pandas numpy --quiet
!pip install statsmodels
!pip install tensorflow
!pip install protobuf==3.20.*
!pip install gitpython pydeck blinker>=1.5.0

from google.colab import drive
drive.mount('/content/drive')

import sys
import os

# Add your Google Drive project folder to Python path
#sys.path.append('/content/drive/MyDrive/Colab_Stock')  # Update this to match your actual utils.py path

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import joblib
import json
import utils
from keras.models import load_model
from utils import plot_graph, preprocess_stock_data_lstm

# Commented out IPython magic to ensure Python compatibility.
# %%writefile main.py
# 
# import streamlit as st
# import yfinance as yf
# import pandas as pd
# import numpy as np
# import joblib
# import json
# import utils
# from keras.models import load_model
# from utils import plot_graph, preprocess_stock_data_lstm
# 
# st.title("Stocksight - Stock Price Predictor")
# 
# stock = st.selectbox("Choose Stock", ["RELIANCE.NS"])  # Add other stocks when their model ready
# 
# next_days = st.number_input("Enter number of future days to predict (max 20)", min_value=1, step=1)
# if next_days > 20:
#     st.warning("Please enter a value less than or equal to 20.")
#     st.stop()
# 
# stock_assets = {
#     #  "RELIANCE.NS": {
#     #     "model_file": "Reliance_model.keras",
#     #     "scaler_file": "scaler.save",
#     #     "metrics_file": "Reliance_model_metrics.json"
#     # }
# 
#     "RELIANCE.NS": {
#         "model_file": "/content/drive/MyDrive/Colab_Stock/Reliance_model.keras",
#         "scaler_file": "/content/drive/MyDrive/Colab_Stock/scaler.save",
#         "metrics_file": "/content/drive/MyDrive/Colab_Stock/Reliance_model_metrics.json"
#     }
#     # Add entries for other stocks when available
# }
# 
# if stock in stock_assets:
#     st.subheader(f"Model Info for {stock}")
# 
#     # ðŸ”˜ Predict button added here
#     if st.button("ðŸ”® Predict"):
#         #model = load_model(stock_assets[stock]["model_file"])
#         model = load_model("/content/drive/MyDrive/Colab_Stock/Reliance_model.keras")
# 
#         scaler = joblib.load(stock_assets[stock]["scaler_file"])
# 
#         with open(stock_assets[stock]["metrics_file"], "r") as f:
#             metrics = json.load(f)
# 
#         st.json(metrics)
# 
#         df = yf.download(stock, period="100d")
#         df_clean = df[['Open', 'High', 'Close']]
# 
#         st.dataframe(df_clean.tail())
# 
#         st.subheader("Exploratory Data Analysis")
#         plot_graph(df_clean)
# 
#         X_input, _, _ = preprocess_stock_data_lstm(df, lags=30, scaler=scaler, is_train=False)
# 
#         predictions = []
#         current_input = X_input[-1:].copy()
# 
#         for _ in range(next_days):
#             next_pred = model.predict(current_input)[0][0]
#             predictions.append(next_pred)
#             # Update sequence
#             next_input = np.append(current_input[:, 1:, :], [[[next_pred, next_pred, next_pred]]], axis=1)
#             current_input = next_input
# 
#         predicted_prices = scaler.inverse_transform([[p, p, p] for p in predictions])[:, 0]
# 
#         # Plot forecast
#         st.subheader(f"ðŸ“Š {next_days}-Day Price Forecast for {stock}")
#         future_dates = pd.date_range(start=df.index[-1], periods=next_days + 1, freq='B')[1:]  # Changed n_days to next_days
#         forecast_df = pd.DataFrame({'Date': future_dates, 'Predicted Close': predicted_prices})
#         forecast_df.set_index('Date', inplace=True)
# 
#         st.line_chart(forecast_df)
# 
# else:
#     st.warning("ðŸš§ This stock is not yet supported.")
#

from pyngrok import ngrok
import os
import time

# Kill any previously running tunnels
ngrok.kill()

# OPTIONAL: Small delay to ensure cleanup
time.sleep(2)

# Set ngrok auth token (replace with your actual token if needed)
ngrok.set_auth_token("2z9A28wqC8QpClwA08VkvAvOzsL_5CVDfosVWkQGfsLdajzw7")

# Connect to the desired port (Streamlit default is 8501)
public_url = ngrok.connect(8501)
print(f"ðŸ”— Public URL: {public_url}")

# Launch your Streamlit app
!streamlit run main.py --server.port 8501 > /dev/null 2>&1 &